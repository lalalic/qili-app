type Application {  _id: ObjectID!  apiKey: String!  name: String!  author: User  createdAt: Date!  updatedAt: Date}scalar Datetype File {  token(key: String): String  url: String}enum Gender {  girl  boy}input loginInput {  contact: String!  token: String!  name: String}type Mutation {  requestToken(data: requestTokenInput!): Boolean  login(data: loginInput): User  logout: Boolean  user_update(data: user_updateInput!): User  role_create(name: String): Role  role_update(_id: ObjectID!, name: String): Role  role_remove(_id: ObjectID!): Boolean  role_user_add(_id: ObjectID!, users: [String!]!): Date  role_user_remove(_id: ObjectID!, users: [String!]!): Date  file_connect(type: String!, id: String!, files: [String!]!): Boolean  app_create(name: String!): Application  app_update(id: ObjectID!, name: String): Application  app_remove(id: ObjectID!): Boolean}interface Named {  _id: ObjectID!  name: String  photo(size: Int = 25): String}interface Node {  id: ID!}# mongodb IDscalar ObjectIDtype Query {  version: String!  node(id: ID!): Node  schema: String!  me: User!}input requestTokenInput {  contact: String!}type Role {  _id: ObjectID!  createdAt: Date!  updatedAt: Date  author: Named  users: [Named]}type User implements Node, Named {  id: ID!  _id: ObjectID!  photo(size: Int = 25): String  name: String  email: String  phone: String  createdAt: Date!  updatedAt: Date  token: String  username: String  birthday: Date  gender: Gender  location: String  signature: String  roles: [Role]  applications: [Application]!}input user_updateInput {  username: String  birthday: Date  gender: Gender  location: String  signature: String}