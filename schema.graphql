type App implements Node {
  id: ID!
  apiKey: String!
  name: String!
  uname: String
  cloudCode: String
  author: User
  createdAt: Date!
  updatedAt: Date
  comments(last: Int, before: String): CommentConnection
}

type Comment implements Node {
  id: ID!
  content: String!
  type: CommentType
  author: User!
  createdAt: Date!
  host: ID!
}

type CommentConnection {
  edges: [CommentEdge]
  pageInfo: PageInfo
}

type CommentEdge {
  node: Comment
  cursor: String
}

enum CommentType {
  photo
  text
}

scalar Date

type File {
  id: ID!
  url: String
  host: ID!
}

type FileToken {
  token: String!
  expires: Int!
}

enum Gender {
  girl
  boy
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

type Mutation {
  requestToken(contact: String!): Boolean
  login(contact: String!, token: String!, name: String): User
  logout: Boolean
  user_update(username: String, birthday: Date, gender: Gender, location: String, signature: String): Date
  role_create(name: String): Role
  role_update(_id: ObjectID!, name: String): Date
  role_remove(_id: ObjectID!): Boolean
  role_user_add(_id: ObjectID!, users: [String!]!): Date
  role_user_remove(_id: ObjectID!, users: [String!]!): Date
  file_link(url: String!, id: ID!, field: String!): Boolean
  file_token(key: String): FileToken
  file_clean(host: ID!): Boolean
  app_create(name: String!, uname: String): App
  app_update(_id: ObjectID!, name: String, uname: String, cloudCode: String): Date
  app_remove(_id: ObjectID!): Boolean
  comment(host: ID!, content: String!, type: CommentType): Comment
}

interface Named {
  id: ID!
  name: String
  photo(size: Int = 25): String
}

interface Node {
  id: ID!
}

# mongodb ID
scalar ObjectID

type PageInfo {
  hasNextPage: Boolean
  endCursor: String
  hasPreviousPage: Boolean
  startCursor: String
}

type Query {
  version: String!
  node(id: ID!): Node
  schema: String!
  me: User!
}

type Role implements Node {
  id: ID!
  name: String!
  createdAt: Date!
  updatedAt: Date
  author: Named
  users: [Named]
}

type Subscription {
  ping: Boolean
}

type User implements Node, Named {
  id: ID!
  photo(size: Int = 25): String
  name: String
  email: String
  phone: String
  createdAt: Date!
  updatedAt: Date
  token: String
  username: String
  birthday: Date
  gender: Gender
  location: String
  signature: String
  roles: [Role]
  apps: [App]!
  app(_id: ObjectID!): App
}
