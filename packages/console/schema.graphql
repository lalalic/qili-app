type App implements Node {
  id: ID!
  apiKey: String!
  name: String!
  uname: String
  cloudCode: String
  isDev: Boolean
  author: User
  createdAt: Date!
  updatedAt: Date
  schema: String
  logs(status: String, first: Int, after: JSON): LogConnection
  canRunInCore: Boolean
}

type AppComment implements Comment & Node {
  id: ID!
  content: String!
  type: CommentType
  author: User!
  createdAt: Date!
  parent: ObjectID!
  isOwner: Boolean
}

type AppCommentConnection {
  edges: [AppCommentEdge]
  pageInfo: PageInfo
}

type AppCommentEdge {
  node: AppComment
  cursor: JSON
}

interface Comment {
  id: ID!
  content: String!
  type: CommentType
  author: User!
  createdAt: Date!
  parent: ObjectID!
  isOwner: Boolean
}

enum CommentType {
  photo
  text
}

scalar Date

scalar URL

type File {
  id: ID!
  url: String
  crc: Int
}

type FileToken {
  token: String!
  expires: Int!
  id: String
}

enum Gender {
  girl
  boy
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

type Log implements Node {
  id: ID!
  type: String
  operation: String
  variables: JSON
  status: Int
  startedAt: Date
  time: Int
  report: JSON
  author: User
}

type LogConnection {
  edges: [LogEdge]
  pageInfo: PageInfo
}

type LogEdge {
  node: Log
  cursor: JSON
}

type Mutation {
  requestToken(contact: String!): Boolean
  login(contact: String!, token: String!, name: String): User
  logout: Boolean
  user_update(photo: URL, username: String, birthday: Date, gender: Gender, location: String, signature: String): Date
  role_create(name: String): Role
  role_update(_id: ObjectID!, name: String): Date
  role_remove(_id: ObjectID!): Boolean
  role_user_add(_id: ObjectID!, users: [String!]!): Date
  role_user_remove(_id: ObjectID!, users: [String!]!): Date
  file_create(_id: String!, host: ID!, bucket: String, size: Int, crc: Int, mimeType: String, imageInfo: JSON): File
  file_clean(host: ID!): Boolean
  app_create(name: String!, uname: String): App
  app_update(_id: ObjectID!, name: String, uname: String, cloudCode: String, isDev: Boolean): App
  app_remove(_id: ObjectID!): Boolean
  app_canRunInCore(_id: ObjectID!, canRunInCore: Boolean): App
  comment_create(parent: ID, content: String!, type: CommentType, _id: ObjectID): Comment
}

interface Node {
  id: ID!
}

# mongodb ID
scalar ObjectID

type PageInfo {
  hasNextPage: Boolean
  endCursor: JSON
  hasPreviousPage: Boolean
  startCursor: JSON
}

type Query {
  version: String!
  schema: String!
  me: User!
  file_upload_token(host:ID, path:String, justToken:Boolean): FileToken
  app_comments(parent: ObjectID, last: Int, before: JSON): AppCommentConnection
}

type Role implements Node {
  id: ID!
  name: String!
  createdAt: Date!
  updatedAt: Date
  author: User
  users: [User]
}

type Subscription {
  ping: Boolean
}

type User implements Node {
  id: ID!
  photo(size: Int = 25): URL
  name: String
  email: String
  phone: String
  createdAt: Date!
  updatedAt: Date
  token: String
  username: String
  birthday: Date
  gender: Gender
  location: String
  signature: String
  roles: [Role]
  apps: [App]!
  app(_id: ObjectID!): App
}
